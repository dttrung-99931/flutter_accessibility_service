import 'package:collection/collection.dart';

import 'constants.dart';

class AccessibilityEvent {
  /// Unique identifier generated by the plugin
  String? mapId;

  /// Gets the fully qualified resource name of the source view's id.
  /// https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#getViewIdResourceName()
  String? nodeId;

  /// The performed action that triggered this event
  /// https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent#getAction()
  NodeAction? actionType;

  /// the time in which this event was sent.
  /// https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED
  DateTime? eventTime;

  /// the package name of the source
  /// https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent#getPackageName()
  String? packageName;

  /// the event type.
  /// https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent#getEventType()
  EventType? eventType;

  /// Gets the text of this node.
  /// https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#getText()
  String? text;

  /// All texts on screen. Only root node has this.
  String? screenText;

  /// the bit mask of change types signaled by a `TYPE_WINDOW_CONTENT_CHANGED` event or `TYPE_WINDOW_STATE_CHANGED`. A single event may represent multiple change types
  /// https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent#getContentChangeTypes()
  ContentChangeTypes? contentChangeTypes;

  /// the movement granularity that was traversed
  /// https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent#getMovementGranularity()
  int? movementGranularity;

  /// the type of the window
  /// https://developer.android.com/reference/android/view/accessibility/AccessibilityWindowInfo#getType()
  WindowType? windowType;

  /// check if this window is active. An active window is the one the user is currently touching or the window has input focus and the user is not touching any window.
  /// https://developer.android.com/reference/android/view/accessibility/AccessibilityWindowInfo#isActive()
  bool? isActive;

  /// check if this window has input focus.
  /// https://developer.android.com/reference/android/view/accessibility/AccessibilityWindowInfo#isFocused()
  bool? isFocused;

  /// check if this node is clickable.
  bool? isClickable;

  /// check if this node is scrollable.
  bool? isScrollable;

  /// check if this node is focusable.
  bool? isFocusable;

  /// check if this node is checkable.
  bool? isCheckable;

  /// check if this node is long clickable.
  bool? isLongClickable;

  /// check if this node is long editable.
  bool? isEditable;

  /// Check if the window is in picture-in-picture mode.
  /// https://developer.android.com/reference/android/view/accessibility/AccessibilityWindowInfo#isInPictureInPictureMode()
  bool? isPip;

  /// Gets the node bounds in screen coordinates.
  /// https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#getBoundsInScreen(android.graphics.Rect)
  ScreenBounds? screenBounds;

  /// Get the node childrens available actions
  /// https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#getViewIdResourceName()
  List<NodeAction>? actions;

  /// Get the node childrens and sub childrens info
  /// https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#getViewIdResourceName()
  List<AccessibilityEvent>? subNodes;

  AccessibilityEvent({
    this.mapId,
    this.nodeId,
    this.actionType,
    this.eventTime,
    this.packageName,
    this.eventType,
    this.text,
    this.contentChangeTypes,
    this.movementGranularity,
    this.windowType,
    this.isActive,
    this.isFocused,
    this.isClickable,
    this.isScrollable,
    this.isFocusable,
    this.isCheckable,
    this.isLongClickable,
    this.isEditable,
    this.isPip,
    this.screenBounds,
    this.actions,
    this.screenText,
  });

  AccessibilityEvent.fromMap(Map<dynamic, dynamic> map) {
    mapId = map['mapId'];
    nodeId = map['nodeId'];
    actionType = NodeAction.values
            .firstWhereOrNull((element) => element.id == map['actionType']) ??
        NodeAction.unknown;
    eventTime = DateTime.now();
    packageName = map['packageName'];
    if (map['eventType'] == null) {
      eventType = null;
    } else {
      eventType = EventType.values
          .firstWhereOrNull((element) => element.id == map['eventType']);
    }
    text = map['capturedText'].toString();
    screenText = map['screenText'].toString();
    contentChangeTypes = map['contentChangeTypes'] == null
        ? null
        : (ContentChangeTypes.values.firstWhereOrNull(
                (element) => element.id == map['contentChangeTypes']) ??
            ContentChangeTypes.others);
    movementGranularity = int.tryParse(map['movementGranularity'].toString());
    windowType = map['windowType'] == null
        ? null
        : WindowType.values
            .firstWhereOrNull((element) => element.id == map['windowType']);
    isActive = map['isActive'];
    isFocused = map['isFocused'];
    isClickable = map['isClickable'];
    isScrollable = map['isScrollable'];
    isFocusable = map['isFocusable'];
    isCheckable = map['isCheckable'];
    isLongClickable = map['isLongClickable'];
    isEditable = map['isEditable'];
    isPip = map['isPip'];
    screenBounds = map['screenBounds'] != null
        ? ScreenBounds.fromMap(map['screenBounds'])
        : null;
    subNodes = map['subNodesActions'] != null
        ? (map['subNodesActions'] as List<dynamic>)
            .map((e) => AccessibilityEvent.fromMap(e))
            .toList()
        : [];
    actions = map['parentActions'] == null
        ? []
        : (map['parentActions'] as List<dynamic>)
            .map((e) =>
                (NodeAction.values
                    .firstWhereOrNull((element) => element.id == e)) ??
                NodeAction.unknown)
            .toList();
  }

  @override
  String toString() {
    return '''AccessibilityEvent: (
       mapId: $mapId 
       nodeId: $nodeId 
       Action Type: $actionType 
       Event Time: $eventTime 
       Package Name: $packageName 
       Event Type: $eventType 
       Captured Text: $text 
       Screen Text: $screenText
       content Change Types: $contentChangeTypes 
       Movement Granularity: $movementGranularity
       Is Active: $isActive
       is focused: $isFocused
       is Clickable: $isClickable
       is Scrollable: $isScrollable
       is Focusable: $isFocusable
       is Checkable: $isCheckable
       is LongClickable: $isLongClickable
       is Editable: $isEditable
       in Pip: $isPip
       window Type: $windowType
       Screen bounds: $screenBounds
       actions: $actions
       ${eventType != null ? "subNodes: $subNodes" : ""}
       )''';
  }
}

class ScreenBounds {
  int? right;
  int? top;
  int? left;
  int? bottom;
  int? width;
  int? height;

  ScreenBounds({
    this.right,
    this.top,
    this.left,
    this.bottom,
    this.width,
    this.height,
  });

  ScreenBounds.fromMap(Map<dynamic, dynamic> json) {
    right = int.tryParse(json['right'].toString());
    top = int.tryParse(json['top'].toString());
    left = int.tryParse(json['left'].toString());
    bottom = int.tryParse(json['bottom'].toString());
    width = int.tryParse(json['width'].toString());
    height = int.tryParse(json['height'].toString());
  }

  @override
  String toString() {
    return "left: $left - right: $right - top: $top - bottom: $bottom - width: $width - height: $height";
  }
}
